// Code generated by protoc-gen-go. DO NOT EDIT.
// source: channel.proto

package grpcchannel

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// shared empty response
type EmptyResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyResp) Reset()         { *m = EmptyResp{} }
func (m *EmptyResp) String() string { return proto.CompactTextString(m) }
func (*EmptyResp) ProtoMessage()    {}
func (*EmptyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f385724121f37b, []int{0}
}

func (m *EmptyResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EmptyResp.Unmarshal(m, b)
}
func (m *EmptyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EmptyResp.Marshal(b, m, deterministic)
}
func (m *EmptyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyResp.Merge(m, src)
}
func (m *EmptyResp) XXX_Size() int {
	return xxx_messageInfo_EmptyResp.Size(m)
}
func (m *EmptyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyResp.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyResp proto.InternalMessageInfo

//Ping IN
type Ping struct {
	Mid                  string   `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Hostname             string   `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Os                   string   `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`
	Interval             int32    `protobuf:"varint,4,opt,name=interval,proto3" json:"interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f385724121f37b, []int{1}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

func (m *Ping) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Ping) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *Ping) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

//ping out
type Pong struct {
	Action               string   `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f385724121f37b, []int{2}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Pong) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

//cmd
type CmdOutput struct {
	ReturnCode           int32    `protobuf:"zigzag32,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	Stdout               string   `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr               string   `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Mid                  string   `protobuf:"bytes,4,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmdOutput) Reset()         { *m = CmdOutput{} }
func (m *CmdOutput) String() string { return proto.CompactTextString(m) }
func (*CmdOutput) ProtoMessage()    {}
func (*CmdOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f385724121f37b, []int{3}
}

func (m *CmdOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmdOutput.Unmarshal(m, b)
}
func (m *CmdOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmdOutput.Marshal(b, m, deterministic)
}
func (m *CmdOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdOutput.Merge(m, src)
}
func (m *CmdOutput) XXX_Size() int {
	return xxx_messageInfo_CmdOutput.Size(m)
}
func (m *CmdOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdOutput.DiscardUnknown(m)
}

var xxx_messageInfo_CmdOutput proto.InternalMessageInfo

func (m *CmdOutput) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *CmdOutput) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *CmdOutput) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *CmdOutput) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

// rpxy Req
type RPxyReq struct {
	Mid                  string   `protobuf:"bytes,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Port2                string   `protobuf:"bytes,2,opt,name=port2,proto3" json:"port2,omitempty"`
	Addr3                string   `protobuf:"bytes,3,opt,name=addr3,proto3" json:"addr3,omitempty"`
	NumOfConn2           int32    `protobuf:"varint,4,opt,name=num_of_conn2,json=numOfConn2,proto3" json:"num_of_conn2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPxyReq) Reset()         { *m = RPxyReq{} }
func (m *RPxyReq) String() string { return proto.CompactTextString(m) }
func (*RPxyReq) ProtoMessage()    {}
func (*RPxyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f385724121f37b, []int{4}
}

func (m *RPxyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPxyReq.Unmarshal(m, b)
}
func (m *RPxyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPxyReq.Marshal(b, m, deterministic)
}
func (m *RPxyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPxyReq.Merge(m, src)
}
func (m *RPxyReq) XXX_Size() int {
	return xxx_messageInfo_RPxyReq.Size(m)
}
func (m *RPxyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RPxyReq.DiscardUnknown(m)
}

var xxx_messageInfo_RPxyReq proto.InternalMessageInfo

func (m *RPxyReq) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

func (m *RPxyReq) GetPort2() string {
	if m != nil {
		return m.Port2
	}
	return ""
}

func (m *RPxyReq) GetAddr3() string {
	if m != nil {
		return m.Addr3
	}
	return ""
}

func (m *RPxyReq) GetNumOfConn2() int32 {
	if m != nil {
		return m.NumOfConn2
	}
	return 0
}

// rpxy resp
type RPxyResp struct {
	Port2                string   `protobuf:"bytes,1,opt,name=port2,proto3" json:"port2,omitempty"`
	Addr3                string   `protobuf:"bytes,2,opt,name=addr3,proto3" json:"addr3,omitempty"`
	NumOfConn2           int32    `protobuf:"varint,3,opt,name=num_of_conn2,json=numOfConn2,proto3" json:"num_of_conn2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPxyResp) Reset()         { *m = RPxyResp{} }
func (m *RPxyResp) String() string { return proto.CompactTextString(m) }
func (*RPxyResp) ProtoMessage()    {}
func (*RPxyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8f385724121f37b, []int{5}
}

func (m *RPxyResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPxyResp.Unmarshal(m, b)
}
func (m *RPxyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPxyResp.Marshal(b, m, deterministic)
}
func (m *RPxyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPxyResp.Merge(m, src)
}
func (m *RPxyResp) XXX_Size() int {
	return xxx_messageInfo_RPxyResp.Size(m)
}
func (m *RPxyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RPxyResp.DiscardUnknown(m)
}

var xxx_messageInfo_RPxyResp proto.InternalMessageInfo

func (m *RPxyResp) GetPort2() string {
	if m != nil {
		return m.Port2
	}
	return ""
}

func (m *RPxyResp) GetAddr3() string {
	if m != nil {
		return m.Addr3
	}
	return ""
}

func (m *RPxyResp) GetNumOfConn2() int32 {
	if m != nil {
		return m.NumOfConn2
	}
	return 0
}

func init() {
	proto.RegisterType((*EmptyResp)(nil), "grpcchannel.EmptyResp")
	proto.RegisterType((*Ping)(nil), "grpcchannel.Ping")
	proto.RegisterType((*Pong)(nil), "grpcchannel.Pong")
	proto.RegisterType((*CmdOutput)(nil), "grpcchannel.CmdOutput")
	proto.RegisterType((*RPxyReq)(nil), "grpcchannel.RPxyReq")
	proto.RegisterType((*RPxyResp)(nil), "grpcchannel.RPxyResp")
}

func init() { proto.RegisterFile("channel.proto", fileDescriptor_c8f385724121f37b) }

var fileDescriptor_c8f385724121f37b = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcf, 0x8f, 0xa2, 0x30,
	0x14, 0xc7, 0x05, 0xf1, 0xd7, 0xd3, 0xdd, 0x68, 0xe3, 0x1a, 0xc2, 0x65, 0x0d, 0x27, 0x4f, 0xc6,
	0xe0, 0x79, 0x4f, 0x64, 0xcf, 0x92, 0x9e, 0xf6, 0xe6, 0x32, 0xb4, 0x22, 0x09, 0xf4, 0x31, 0xa5,
	0x4c, 0xf4, 0xcf, 0x9b, 0xff, 0x6c, 0x52, 0xe8, 0xe0, 0x68, 0xcc, 0xdc, 0xf8, 0x7e, 0xf2, 0xf8,
	0xbc, 0xf6, 0xbd, 0xc2, 0x8f, 0xe4, 0x1c, 0x0b, 0xc1, 0xf3, 0x6d, 0x29, 0x51, 0x21, 0x99, 0xa6,
	0xb2, 0x4c, 0x0c, 0xf2, 0xa7, 0x30, 0xf9, 0x5b, 0x94, 0xea, 0x4a, 0x79, 0x55, 0xfa, 0xff, 0xc1,
	0x89, 0x32, 0x91, 0x92, 0x39, 0xf4, 0x8b, 0x8c, 0xb9, 0xd6, 0xda, 0xda, 0x4c, 0xa8, 0xfe, 0x24,
	0x1e, 0x8c, 0xcf, 0x58, 0x29, 0x11, 0x17, 0xdc, 0xb5, 0x1b, 0xdc, 0x65, 0xf2, 0x13, 0x6c, 0xac,
	0xdc, 0x7e, 0x43, 0x6d, 0xac, 0x74, 0x6d, 0x26, 0x14, 0x97, 0x6f, 0x71, 0xee, 0x3a, 0x6b, 0x6b,
	0x33, 0xa0, 0x5d, 0xf6, 0x03, 0x70, 0x22, 0x14, 0x29, 0x59, 0xc1, 0x30, 0x4e, 0x54, 0x86, 0xc2,
	0x34, 0x31, 0x89, 0x10, 0x70, 0x58, 0xac, 0xe2, 0xa6, 0xc7, 0x8c, 0x36, 0xdf, 0xbe, 0x80, 0x49,
	0x58, 0xb0, 0x43, 0xad, 0xca, 0x5a, 0x91, 0xdf, 0x30, 0x95, 0x5c, 0xd5, 0x52, 0x1c, 0x13, 0x64,
	0xbc, 0xf9, 0x7b, 0x41, 0xa1, 0x45, 0x21, 0x32, 0xae, 0xcd, 0x95, 0x62, 0x58, 0x2b, 0x73, 0x4e,
	0x93, 0x0c, 0xe7, 0x52, 0x9a, 0x93, 0x9a, 0xf4, 0x79, 0x57, 0xa7, 0xbb, 0xab, 0x9f, 0xc1, 0x88,
	0x46, 0x97, 0x2b, 0xe5, 0xaf, 0x4f, 0x06, 0xb1, 0x84, 0x41, 0x89, 0x52, 0x05, 0xc6, 0xde, 0x06,
	0x4d, 0x63, 0xc6, 0xe4, 0xde, 0xb8, 0xdb, 0x40, 0xd6, 0x30, 0x13, 0x75, 0x71, 0xc4, 0xd3, 0x31,
	0x41, 0x21, 0x02, 0x33, 0x0c, 0x10, 0x75, 0x71, 0x38, 0x85, 0x9a, 0xf8, 0xff, 0x60, 0xdc, 0xb6,
	0xaa, 0xca, 0x9b, 0xd9, 0x7a, 0x6a, 0xb6, 0xbf, 0x33, 0xf7, 0x1f, 0xcd, 0xc1, 0xbb, 0x05, 0xa3,
	0xb0, 0xdd, 0x31, 0x09, 0x60, 0x48, 0xb9, 0xd6, 0x91, 0xc5, 0xf6, 0xcb, 0xee, 0xb7, 0x7a, 0xd7,
	0xde, 0x03, 0x42, 0x91, 0xfa, 0xbd, 0x9d, 0x45, 0xfe, 0x34, 0x43, 0xa7, 0xbc, 0xaa, 0x73, 0x45,
	0x56, 0x77, 0x35, 0xdd, 0x32, 0xbc, 0x7b, 0x7e, 0x7b, 0x47, 0x3d, 0x12, 0xc2, 0x9c, 0x46, 0x12,
	0x2f, 0xd7, 0x10, 0x85, 0x92, 0x98, 0xe7, 0x5c, 0x92, 0xe5, 0x5d, 0xb5, 0x19, 0xb1, 0xf7, 0xeb,
	0x09, 0xd5, 0x8a, 0x9d, 0xf5, 0x32, 0x6c, 0xde, 0xeb, 0xfe, 0x23, 0x00, 0x00, 0xff, 0xff, 0xc0,
	0xf2, 0x39, 0xc1, 0xc0, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChannelClient is the client API for Channel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChannelClient interface {
	Report(ctx context.Context, in *Ping, opts ...grpc.CallOption) (Channel_ReportClient, error)
	CmdResult(ctx context.Context, in *CmdOutput, opts ...grpc.CallOption) (*EmptyResp, error)
	RProxyController(ctx context.Context, in *RPxyReq, opts ...grpc.CallOption) (Channel_RProxyControllerClient, error)
}

type channelClient struct {
	cc *grpc.ClientConn
}

func NewChannelClient(cc *grpc.ClientConn) ChannelClient {
	return &channelClient{cc}
}

func (c *channelClient) Report(ctx context.Context, in *Ping, opts ...grpc.CallOption) (Channel_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Channel_serviceDesc.Streams[0], "/grpcchannel.Channel/Report", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelReportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Channel_ReportClient interface {
	Recv() (*Pong, error)
	grpc.ClientStream
}

type channelReportClient struct {
	grpc.ClientStream
}

func (x *channelReportClient) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *channelClient) CmdResult(ctx context.Context, in *CmdOutput, opts ...grpc.CallOption) (*EmptyResp, error) {
	out := new(EmptyResp)
	err := c.cc.Invoke(ctx, "/grpcchannel.Channel/CmdResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelClient) RProxyController(ctx context.Context, in *RPxyReq, opts ...grpc.CallOption) (Channel_RProxyControllerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Channel_serviceDesc.Streams[1], "/grpcchannel.Channel/RProxyController", opts...)
	if err != nil {
		return nil, err
	}
	x := &channelRProxyControllerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Channel_RProxyControllerClient interface {
	Recv() (*RPxyResp, error)
	grpc.ClientStream
}

type channelRProxyControllerClient struct {
	grpc.ClientStream
}

func (x *channelRProxyControllerClient) Recv() (*RPxyResp, error) {
	m := new(RPxyResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChannelServer is the server API for Channel service.
type ChannelServer interface {
	Report(*Ping, Channel_ReportServer) error
	CmdResult(context.Context, *CmdOutput) (*EmptyResp, error)
	RProxyController(*RPxyReq, Channel_RProxyControllerServer) error
}

func RegisterChannelServer(s *grpc.Server, srv ChannelServer) {
	s.RegisterService(&_Channel_serviceDesc, srv)
}

func _Channel_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ping)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelServer).Report(m, &channelReportServer{stream})
}

type Channel_ReportServer interface {
	Send(*Pong) error
	grpc.ServerStream
}

type channelReportServer struct {
	grpc.ServerStream
}

func (x *channelReportServer) Send(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func _Channel_CmdResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChannelServer).CmdResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcchannel.Channel/CmdResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChannelServer).CmdResult(ctx, req.(*CmdOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Channel_RProxyController_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RPxyReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChannelServer).RProxyController(m, &channelRProxyControllerServer{stream})
}

type Channel_RProxyControllerServer interface {
	Send(*RPxyResp) error
	grpc.ServerStream
}

type channelRProxyControllerServer struct {
	grpc.ServerStream
}

func (x *channelRProxyControllerServer) Send(m *RPxyResp) error {
	return x.ServerStream.SendMsg(m)
}

var _Channel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcchannel.Channel",
	HandlerType: (*ChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CmdResult",
			Handler:    _Channel_CmdResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Report",
			Handler:       _Channel_Report_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RProxyController",
			Handler:       _Channel_RProxyController_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "channel.proto",
}
