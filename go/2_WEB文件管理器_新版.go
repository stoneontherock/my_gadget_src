//Release: 2019-07-09
package main

import (
	"flag"
	"fmt"
	"html/template"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
)

var addr *string
var rootDir *string

var errTemplate *template.Template
var dirTemplate *template.Template

func init() {
	binDir, _ := filepath.Abs(filepath.Dir(os.Args[0]))
	addr = flag.String("a", ":80", "http监听地址,例如: ':8000'或'192.168.0.100:8000'")
	rootDir = flag.String("d", binDir, "http监听地址,例如: ':8000'或'192.168.0.100:8000'")
	flag.Parse()

	var err error
	*rootDir, err = filepath.Abs(*rootDir)
	errFatal(err)

	errTemplate, err = template.New("errTemp").Parse(HTML_ERR)
	errFatal(err)

	dirNameFunc := func(path string) string {
		path = strings.TrimRight(path, "/")
		return filepath.Dir(path) + "/"
	}
	dirTemplate, err = template.New("dirTemp").Funcs(template.FuncMap{"dirName": dirNameFunc}).Parse(HTML_DIR)
	errFatal(err)
}

func main() {
	log.Printf("监听地址:%s  web根目录:%s", *addr, *rootDir)
	log.Println("通过-a命令行选项修改监听地址, 例如: -a 192.168.1.100:8000 或 -a :8000")
	log.Println("通过-d命令行选项修改WEB根目录, 例如: -d /tmp")
	println()
	serve()
}

func serve() {
	http.HandleFunc("/", fs)
	http.HandleFunc("/favicon.ico",func(wr http.ResponseWriter,req *http.Request){wr.Write(favicon)})
	err := http.ListenAndServe(*addr, nil)
	errFatal(err)
}

func fs(wr http.ResponseWriter, req *http.Request) {
	path, err := getPath(req.URL.Path)
	if err != nil {
		renderHTMLErr(wr, err.Error())
		return
	}

	switch req.Method {
	case "GET":
		listFS(wr, req, path)
		return
	case "POST":
		uploadFiles(wr, req, path)
	default:
		http.Error(wr, "不支持的方法", http.StatusMethodNotAllowed)
		return
	}

}

func listFS(wr http.ResponseWriter, req *http.Request, path string) {
	fi, err := os.Stat(path)
	if err != nil {
		renderHTMLErr(wr, err.Error())
		return
	}

	if fi.Mode().IsDir() {
		hf, err := http.Dir(path).Open("")
		errFatal(err)
		fis, err := hf.Readdir(-1)
		errFatal(err)

		renderHTMLDir(wr, path, fis)
		return
	}

	if fi.Mode().IsRegular() {
		http.ServeFile(wr, req, path)
		return
	}

	renderHTMLErr(wr, "路径不存在或访问的路径不是目录/常规文件")
}

func uploadFiles(wr http.ResponseWriter, req *http.Request, path string) {
	err := os.Chdir(path)
	errFatal(err)

	req.ParseMultipartForm(64 << 20) //64MB内存buffer
	var uplFail, upSucc int
	var rename string

	if req.MultipartForm == nil {
		renderHTMLErr(wr, "req.MultipartForm == nil")
		return
	}

	for _, fileHeader := range req.MultipartForm.File["uploadFiles"] {
		srcFile, err := fileHeader.Open()
		if err != nil {
			renderHTMLErr(wr, fmt.Sprintf("打开文件(%s)失败: %v", fileHeader.Filename, err))
			return
		}

		fname := fileHeader.Filename
		upflag := "-上传"
		//循环检查上传文件是否和服务端文件重名，如果文件存在，则重命名上传文件,也就是“.扩展名” 前加 "upflagN"，加了后还重名就继续加
		for i := 1; ; i++ {
			_, err := os.Stat(fname)
			if err != nil {
				break
			}

			suffix := filepath.Ext(fname)
			withoutSuf := strings.TrimSuffix(fname, suffix)
			j := strings.LastIndex(withoutSuf, upflag)
			if j <= 0 {
				fname = withoutSuf + fmt.Sprintf("%s%d", upflag, i) + suffix
				continue
			}

			ind, err := strconv.Atoi(withoutSuf[j+len(upflag):])
			if err != nil {
				fname = withoutSuf + fmt.Sprintf("%s%d", upflag, i) + suffix
				continue
			}
			ind++
			i = ind
			fname = withoutSuf[:j] + fmt.Sprintf("%s%d", upflag, ind) + suffix
		}

		if fileHeader.Filename != fname {
			rename = rename + fmt.Sprintf("%-s&nbsp&nbsp<b>上传文件重名，上传文件被重命名为:</b>&nbsp&nbsp%-s </br>", fileHeader.Filename, fname)
		}

		dstFile, err := os.Create(fname) //创建上传文件
		if err != nil {
			renderHTMLErr(wr, "uploadFiles:os.Create:"+err.Error())
			srcFile.Close()
			return
		}

		_, err = io.Copy(dstFile, srcFile)
		if err != nil {
			uplFail++
		} else {
			log.Printf("%s upload %q success\n", req.RemoteAddr[:strings.LastIndex(req.RemoteAddr, ":")], fname)
			upSucc++
		}
		srcFile.Close() //这里是循环，避免用defer *.Close()
		dstFile.Close()
	}

	fmt.Printf("****path=%s\n", path)

	fmt.Fprintf(wr, "<h1>上传失败:%d, 成功:%d</h1> <p>%s</p> <script language='javascript' type='text/javascript'> setTimeout(\"javascript:location.href='%s'\", %d000); </script>",
		uplFail, upSucc, rename, path, 1+len(strings.Split(rename, "</br>")))
}

func renderHTMLErr(wr io.Writer, errStr string) {
	err := errTemplate.Execute(wr, errStr)
	errFatal(err)
}

type fsList struct {
	Path  string
	Dirs  []os.FileInfo
	Files []os.FileInfo
}

type fiList []os.FileInfo

func (fl fiList) Len() int {
	return len(fl)
}

func (fl fiList) Less(i, j int) bool {
	return strings.ToLower(fl[i].Name()) < strings.ToLower(fl[j].Name())
}

func (fl fiList) Swap(i, j int) {
	fl[i], fl[j] = fl[j], fl[i]
}

func renderHTMLDir(wr io.Writer, rootDir string, fis []os.FileInfo) {
	fs := make([]os.FileInfo, len(fis))
	ds := make([]os.FileInfo, len(fis))
	f := 0
	d := 0

	//只显示常规文件和目录
	for i := range fis {
		if fis[i].Mode().IsRegular() {
			fs[f] = fis[i]
			f++
		}
		if fis[i].Mode().IsDir() {
			ds[d] = fis[i]
			d++
		}
	}

	var fl fsList
	fl.Path = rootDir
	fl.Files = fs[:f]
	fl.Dirs = ds[:d]

	//排序,目录在前,文件在后
	sort.Sort(fiList(fl.Files))
	sort.Sort(fiList(fl.Dirs))
	err := dirTemplate.Execute(wr, fl)
	errFatal(err)
}

func getPath(path string) (string, error) {
	fmt.Printf("####%s\n", path)
	p := path
	if p == "/" {
		p = *rootDir
	}

	fmt.Printf("####path=%s p=%s\n", path, p)

	if !strings.HasPrefix(p, *rootDir) {
		return "", fmt.Errorf("不能访问%s", p)
	}
	return p, nil
}

func errFatal(err error) {
	if err != nil {
		panic(err)
	}
}

const (
	HTML_ERR = `
<!doctype html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Web文件管理</title>
</head>
<body>
<strong>{{.}}<br />正在跳转到根目录...</strong>
<script language='javascript' type='text/javascript'> setTimeout("javascript:location.href='/'", 3000); </script>
</body>
</html>
`

	HTML_DIR = `
<!doctype html>
<html lang="zh">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <style type="text/css">
        #上传form{
            height: 2em;
        }
        .a返回{text-decoration-line: underline}

        #文件表格{
            width: 100%;
        }
        td.col1{border-bottom:1px dotted red;text-align: left}
        td.col2{border-bottom:1px dotted red;text-align: right}
        a.文件列表{text-decoration:none;}
    </style>
    <title>WEB文件管理</title>
</head>
<body>
{{- $data := . -}}
<header>
    <form id="上传form" enctype="multipart/form-data" action="{{$data.Path}}" method="POST">
        <input type="file" multiple name="uploadFiles"/>
        <input type="submit" value="批量上传" />
    </form>
    <a class="a返回" href="/"  class="name"><b>&#8634; 返回根目录</b></a><br />
    <a class="a返回" href="{{dirName $data.Path}}"  class="name"><b>&#8634; 返回上层目录</b></a>
</header>

<article>
    <br />
    <table id="文件表格">
        <thead><th style="border-bottom:1px dotted red; text-align:left">文件/目录</th><th style="border-bottom:1px dotted red; text-align:right">大小</th></thead>
        <tbody>
        {{- range $index,$dir := $data.Dirs -}}
            <tr>
                <td class="col1"><a href="{{$data.Path}}/{{$dir.Name}}/"  title="点击打开目录" class="文件列表">&bull; {{$dir.Name}}/</a></td>
                <td class="col2">{{$dir.Size}}</td>
            </tr>
        {{end}}
        {{- range $index,$file := $data.Files -}}
            <tr>
                <td class="col1"><a href="{{$data.Path}}/{{$file.Name}}"  title="下载文本文件:右键=>另存为" class="文件列表">&bull; {{$file.Name}}</a></td>
                <td class="col2">{{$file.Size}}</td>
            </tr>
        {{end}}
        </tbody>
    </table>
</article>
</body>
</html>
`
)

var favicon = []byte{137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,16,0,0,0,16,8,6,0,0,0,31,243,255,97,0,0,10,61,105,67,67,80,105,99,99,0,0,120,218,157,83,103,84,83,233,22,61,247,222,244,66,75,136,128,148,75,111,82,21,8,32,82,66,139,128,84,105,162,18,146,0,161,132,24,18,64,236,136,168,192,136,162,34,130,21,25,20,113,192,209,17,144,177,34,138,133,65,177,247,1,121,8,40,227,224,40,54,84,222,15,222,26,125,179,230,189,55,111,246,175,189,246,57,103,157,239,156,125,62,0,70,96,176,68,154,133,170,1,100,74,21,242,136,0,31,60,54,46,30,39,119,3,10,84,32,129,3,128,64,152,45,11,137,244,143,2,0,224,251,241,240,236,136,0,31,248,2,4,224,205,109,64,0,0,110,216,4,134,225,56,252,127,80,23,202,228,10,0,36,12,0,166,139,196,217,66,0,164,16,0,50,114,21,50,5,0,50,10,0,236,164,116,153,2,0,37,0,0,91,30,27,23,15,128,106,1,0,59,101,146,79,3,0,118,210,36,247,2,0,182,40,83,42,2,64,163,0,64,38,202,20,137,0,208,14,0,88,151,163,20,139,0,176,96,0,40,202,145,136,115,1,176,155,0,96,146,161,204,148,0,96,239,0,128,157,41,22,100,3,16,24,0,96,162,16,11,83,1,8,246,0,192,144,71,69,240,0,8,51,1,40,140,148,175,120,210,87,92,33,206,83,0,0,240,178,100,139,229,146,148,84,5,110,33,180,196,29,92,93,185,120,160,56,55,67,172,80,216,132,9,132,233,2,185,8,231,101,101,202,4,210,197,0,147,51,3,0,128,70,118,68,128,15,206,247,227,57,59,184,58,59,219,56,218,58,124,181,168,255,26,252,139,136,141,139,255,151,63,175,194,1,1,0,132,211,245,69,251,179,188,172,26,0,238,24,0,182,241,139,150,180,29,160,101,13,128,214,253,47,154,201,30,0,213,66,128,230,171,95,205,195,225,251,241,240,84,133,66,230,102,103,151,155,155,107,43,17,11,109,133,169,95,245,249,159,9,127,1,95,245,179,229,251,241,240,223,215,131,251,138,147,5,202,12,5,30,17,224,131,11,179,50,178,148,114,60,91,38,16,138,113,155,63,30,241,223,46,252,243,119,76,139,16,39,139,229,98,169,80,140,71,75,196,185,18,105,10,206,203,146,138,36,10,73,150,20,151,72,255,147,137,127,179,236,15,152,188,107,0,96,213,126,6,246,66,91,80,187,202,6,236,151,46,32,176,232,128,37,236,2,0,228,119,223,130,169,209,16,6,0,49,6,131,147,119,15,0,48,249,155,255,29,104,25,0,160,217,146,20,28,0,128,23,17,133,11,149,242,156,201,24,1,0,128,8,52,80,5,54,104,131,62,24,131,5,216,128,35,184,128,59,120,129,31,204,134,80,136,130,56,88,0,66,72,133,76,144,67,46,44,133,85,80,4,37,176,17,182,66,21,236,134,90,168,135,70,56,2,45,112,2,206,194,5,184,2,215,224,22,60,128,94,24,128,231,48,10,111,96,28,65,16,50,194,68,88,136,54,98,128,152,34,214,136,35,194,69,102,33,126,72,48,18,129,196,33,137,72,10,34,69,148,200,82,100,53,82,130,148,35,85,200,94,164,30,249,30,57,142,156,69,46,33,61,200,61,164,15,25,70,126,67,62,160,24,202,64,217,168,30,106,134,218,161,92,212,27,13,66,163,208,249,104,10,186,8,205,71,11,209,13,104,37,90,131,30,66,155,209,179,232,21,244,22,218,139,62,71,199,48,192,232,24,7,51,196,108,48,46,198,195,66,177,120,44,25,147,99,203,177,98,172,2,171,193,26,177,54,172,19,187,129,245,98,35,216,123,2,137,192,34,224,4,27,130,59,33,144,48,151,32,36,44,34,44,39,148,18,170,8,7,8,205,132,14,194,13,66,31,97,148,240,153,200,36,234,18,173,137,110,68,62,49,150,152,66,204,37,22,17,43,136,117,196,99,196,243,196,91,196,1,226,27,18,137,196,33,153,147,92,72,129,164,56,82,26,105,9,169,148,180,147,212,68,58,67,234,33,245,147,198,200,100,178,54,217,154,236,65,14,37,11,200,10,114,17,121,59,249,16,249,52,249,58,121,128,252,142,66,167,24,80,28,41,254,148,120,138,148,82,64,169,160,28,164,156,162,92,167,12,82,198,169,106,84,83,170,27,53,148,42,162,46,166,150,81,107,169,109,212,171,212,1,234,56,77,157,102,78,243,160,69,209,210,104,171,104,149,180,70,218,121,218,67,218,43,58,157,110,68,119,165,135,211,37,244,149,244,74,250,97,250,69,122,31,253,61,67,131,97,197,224,49,18,24,74,198,6,198,126,198,25,198,61,198,43,38,147,105,198,244,98,198,51,21,204,13,204,122,230,57,230,99,230,59,21,150,138,173,10,95,69,164,178,66,165,90,165,89,229,186,202,11,85,170,170,169,170,183,234,2,213,124,213,10,213,163,170,87,85,71,212,168,106,102,106,60,53,129,218,114,181,106,181,227,106,119,212,198,212,89,234,14,234,161,234,153,234,165,234,7,213,47,169,15,105,144,53,204,52,252,52,68,26,133,26,251,52,206,105,244,179,48,150,49,139,199,18,178,86,179,106,89,231,89,3,108,18,219,156,205,103,167,177,75,216,223,177,187,217,163,154,26,154,51,52,163,53,243,52,171,53,79,106,246,114,48,142,25,135,207,201,224,148,113,142,112,110,115,62,76,209,155,226,61,69,60,101,253,148,198,41,215,167,188,213,154,170,229,165,37,214,42,214,106,210,186,165,245,65,27,215,246,211,78,215,222,164,221,162,253,72,135,160,99,165,19,174,147,171,179,75,231,188,206,200,84,246,84,247,169,194,169,197,83,143,76,189,175,139,234,90,233,70,232,46,209,221,167,219,165,59,166,167,175,23,160,39,211,219,174,119,78,111,68,159,163,239,165,159,166,191,69,255,148,254,176,1,203,96,150,129,196,96,139,193,105,131,103,184,38,238,141,103,224,149,120,7,62,106,168,107,24,104,168,52,220,107,216,109,56,110,100,110,52,215,168,192,168,201,232,145,49,205,152,107,156,108,188,197,184,221,120,212,196,192,36,196,100,169,73,131,201,125,83,170,41,215,52,213,116,155,105,167,233,91,51,115,179,24,179,181,102,45,102,67,230,90,230,124,243,124,243,6,243,135,22,76,11,79,139,69,22,53,22,55,45,73,150,92,203,116,203,157,150,215,172,80,43,39,171,84,171,106,171,171,214,168,181,179,181,196,122,167,117,207,52,226,52,215,105,210,105,53,211,238,216,48,108,188,109,114,108,26,108,250,108,57,182,193,182,5,182,45,182,47,236,76,236,226,237,54,217,117,218,125,182,119,178,207,176,175,181,127,224,160,225,48,219,161,192,161,205,225,55,71,43,71,161,99,181,227,205,233,204,233,254,211,87,76,111,157,254,114,134,245,12,241,140,93,51,238,58,177,156,66,156,214,58,181,59,125,114,118,113,150,59,55,58,15,187,152,184,36,186,236,112,185,195,101,115,195,184,165,220,139,174,68,87,31,215,21,174,39,92,223,187,57,187,41,220,142,184,253,234,110,227,158,238,126,208,125,104,166,249,76,241,204,218,153,253,30,70,30,2,143,189,30,189,179,240,89,137,179,246,204,234,245,52,244,20,120,214,120,62,241,50,246,18,121,213,121,13,122,91,122,167,121,31,242,126,225,99,239,35,247,57,230,243,150,231,198,91,198,59,227,139,249,6,248,22,251,118,251,105,248,205,245,171,242,123,236,111,228,159,226,223,224,63,26,224,20,176,36,224,76,32,49,48,40,112,83,224,29,190,30,95,200,175,231,143,206,118,153,189,108,118,71,16,35,40,50,168,42,232,73,176,85,176,60,184,45,4,13,153,29,178,57,228,225,28,211,57,210,57,45,161,16,202,15,221,28,250,40,204,60,108,81,216,143,225,164,240,176,240,234,240,167,17,14,17,75,35,58,35,89,145,11,35,15,70,190,137,242,137,42,139,122,48,215,98,174,114,110,123,180,106,116,66,116,125,244,219,24,223,152,242,152,222,88,187,216,101,177,87,226,116,226,36,113,173,241,228,248,232,248,186,248,177,121,126,243,182,206,27,72,112,74,40,74,184,61,223,124,126,222,252,75,11,116,22,100,44,56,185,80,117,161,96,225,209,68,98,98,76,226,193,196,143,130,80,65,141,96,44,137,159,180,35,105,84,200,19,110,19,62,23,121,137,182,136,134,197,30,226,114,241,96,178,71,114,121,242,80,138,71,202,230,148,225,84,207,212,138,212,17,9,79,82,37,121,153,22,152,182,59,237,109,122,104,250,254,244,137,140,152,140,166,76,74,102,98,230,113,169,134,52,93,218,145,165,159,149,151,213,35,179,150,21,201,122,23,185,45,218,186,104,84,30,36,175,203,70,178,231,103,183,42,216,10,153,162,75,105,161,92,163,236,203,153,149,83,157,243,46,55,58,247,104,158,122,158,52,175,107,177,213,226,245,139,7,243,253,243,191,93,66,88,34,92,210,190,212,112,233,170,165,125,203,188,151,237,93,142,44,79,90,222,190,194,120,69,225,138,129,149,1,43,15,172,162,173,74,95,245,83,129,125,65,121,193,235,213,49,171,219,10,245,10,87,22,246,175,9,88,211,80,164,82,36,47,186,179,214,125,237,238,117,132,117,146,117,221,235,167,175,223,190,254,115,177,168,248,114,137,125,73,69,201,199,82,97,233,229,111,28,190,169,252,102,98,67,242,134,238,50,231,178,93,27,73,27,165,27,111,111,242,220,116,160,92,189,60,191,188,127,115,200,230,230,45,248,150,226,45,175,183,46,220,122,169,98,70,197,238,109,180,109,202,109,189,149,193,149,173,219,77,182,111,220,254,177,42,181,234,86,181,79,117,211,14,221,29,235,119,188,221,41,218,121,125,151,215,174,198,221,122,187,75,118,127,216,35,217,115,119,111,192,222,230,26,179,154,138,125,164,125,57,251,158,214,70,215,118,126,203,253,182,190,78,167,174,164,238,211,126,233,254,222,3,17,7,58,234,93,234,235,15,234,30,44,107,64,27,148,13,195,135,18,14,93,251,206,247,187,214,70,155,198,189,77,156,166,146,195,112,88,121,248,217,247,137,223,223,62,18,116,164,253,40,247,104,227,15,166,63,236,56,198,58,86,220,140,52,47,110,30,109,73,109,233,109,141,107,237,57,62,251,120,123,155,123,219,177,31,109,127,220,127,194,240,68,245,73,205,147,101,167,104,167,10,79,77,156,206,63,61,118,70,118,102,228,108,202,217,254,246,133,237,15,206,197,158,187,217,17,222,209,125,62,232,252,197,11,254,23,206,117,122,119,158,190,232,113,241,196,37,183,75,199,47,115,47,183,92,113,190,210,220,229,212,117,236,39,167,159,142,117,59,119,55,95,117,185,218,122,205,245,90,91,207,204,158,83,215,61,175,159,189,225,123,227,194,77,254,205,43,183,230,220,234,185,61,247,246,221,59,9,119,122,239,138,238,14,221,203,184,247,242,126,206,253,241,7,43,31,18,31,22,63,82,123,84,241,88,247,113,205,207,150,63,55,245,58,247,158,236,243,237,235,122,18,249,228,65,191,176,255,249,63,178,255,241,113,160,240,41,243,105,197,160,193,96,253,144,227,208,137,97,255,225,107,207,230,61,27,120,46,123,62,62,82,244,139,250,47,59,94,88,188,248,225,87,175,95,187,70,99,71,7,94,202,95,78,252,86,250,74,251,213,254,215,51,94,183,143,133,141,61,126,147,249,102,252,109,241,59,237,119,7,222,115,223,119,126,136,249,48,56,158,251,145,252,177,242,147,229,167,182,207,65,159,31,78,100,78,76,252,19,3,152,243,252,37,99,51,162,0,0,0,6,98,75,71,68,0,255,0,255,0,255,160,189,167,147,0,0,0,9,112,72,89,115,0,0,61,131,0,0,61,131,1,135,232,9,11,0,0,0,9,118,112,65,103,0,0,0,16,0,0,0,16,0,92,198,173,195,0,0,3,9,73,68,65,84,56,203,93,147,205,111,27,85,20,197,127,239,195,227,175,56,53,137,234,132,52,78,156,52,46,9,34,164,21,162,93,64,91,216,33,33,177,66,85,17,123,248,31,216,176,99,219,21,236,89,176,67,130,13,18,139,10,161,4,129,20,65,1,53,105,10,113,76,104,43,55,73,107,123,252,49,99,143,103,222,123,44,28,144,202,145,238,238,234,167,115,207,213,17,135,206,177,245,205,254,213,108,46,253,145,210,242,188,16,0,56,0,16,12,194,46,191,109,125,197,141,247,222,103,190,188,40,172,117,24,227,14,162,97,244,201,242,92,118,75,127,241,217,214,202,76,185,124,203,68,242,21,34,158,145,16,80,187,123,135,234,11,47,50,93,42,51,24,185,83,180,168,58,169,207,110,110,215,111,234,86,43,186,38,211,241,186,144,9,32,16,8,28,22,129,164,223,125,76,247,228,111,214,223,250,144,32,176,99,107,206,2,2,103,237,250,96,16,95,211,71,13,191,24,187,146,146,82,98,146,1,254,147,93,158,155,217,64,74,143,198,193,143,92,127,109,29,169,10,236,221,219,35,8,122,172,174,93,194,89,135,117,86,181,90,157,162,110,182,34,97,212,16,165,53,81,216,230,175,157,239,88,185,184,66,146,52,25,180,15,153,175,220,32,12,19,106,127,254,193,81,227,144,197,202,6,198,24,172,53,4,65,44,116,227,56,192,31,118,201,102,61,164,208,164,167,222,160,19,72,252,227,123,188,116,126,14,47,93,36,24,140,152,91,88,163,56,61,79,63,136,48,198,50,138,19,186,189,8,45,148,96,100,44,163,96,132,16,2,169,151,104,117,35,122,237,3,22,150,174,51,28,37,24,99,200,23,74,228,10,37,194,40,6,231,176,206,129,4,157,202,104,116,46,53,142,252,84,214,36,164,189,128,217,115,21,132,146,72,225,112,206,33,0,37,37,0,210,89,148,150,104,157,81,120,255,7,36,134,112,212,227,251,219,95,146,242,210,60,127,110,145,43,175,191,141,144,234,191,29,103,5,74,171,177,3,47,159,2,231,64,8,132,212,96,53,92,120,151,122,63,164,247,100,143,75,102,159,171,217,12,66,128,49,6,103,45,104,137,212,114,12,72,231,61,130,230,1,205,250,38,19,165,53,114,197,5,38,166,231,144,58,131,141,155,20,167,160,221,122,76,227,65,141,218,253,95,185,120,249,77,150,170,235,227,19,82,25,141,151,85,232,217,10,66,132,116,143,118,233,159,220,193,89,131,144,154,176,253,128,223,187,30,126,251,132,201,226,20,171,27,175,50,191,92,69,40,49,118,160,117,28,165,178,202,10,145,87,153,51,87,40,85,47,99,147,136,36,14,193,89,78,246,127,224,229,138,230,157,155,31,160,117,10,33,36,214,26,172,181,214,154,81,164,251,143,182,119,38,74,229,135,169,194,217,101,248,55,72,77,154,60,66,42,162,224,2,97,112,151,76,38,115,218,48,135,84,10,191,249,244,225,238,47,155,59,42,105,252,252,212,203,23,2,237,165,102,108,50,136,147,161,223,77,134,126,103,60,237,78,60,240,59,205,250,118,167,188,184,216,9,250,157,78,215,111,250,199,143,234,181,159,110,127,253,233,231,183,62,254,86,172,206,102,104,249,241,196,153,185,202,170,206,21,103,198,255,116,207,180,50,25,244,40,76,78,34,149,2,112,189,78,251,248,176,94,187,63,157,75,247,255,1,78,125,115,193,16,205,85,245,0,0,0,37,116,69,88,116,99,114,101,97,116,101,45,100,97,116,101,0,50,48,48,56,45,48,54,45,49,53,84,49,51,58,50,48,58,52,48,43,48,48,58,48,48,167,178,175,27,0,0,0,37,116,69,88,116,109,111,100,105,102,121,45,100,97,116,101,0,50,48,48,56,45,48,54,45,49,53,84,49,51,58,50,48,58,52,48,43,48,48,58,48,48,248,3,217,47,0,0,0,0,73,69,78,68,174,66,96,130}